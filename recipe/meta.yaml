#
# QuPath conda-forge friendly recipe
#
# Since the JDK situation in conda-forge is at the moment a bit stuck,
# we repackage QuPath releases, including the current JRE used to develop them.
#
# This package allows using QuPath both as a standalone application or pimped
# from python using "ququ", that should be able to automagically find qupath
# when this package is installed.
#

{% set github_version="0.2.0-m9" %}
{% set version="0.2.0.m9" %}
{% set build_number="0" %}

package:
  name: qupath
  version: {{ version }}

source:

  - url: https://github.com/qupath/qupath/releases/download/v{{ github_version }}/QuPath-{{ github_version }}-Linux.tar.xz  # [linux]
    sha256: 8eace54cdba63c1c4b19a91d0dd103256bc845922e0532025c4a2c23c30bbdae                                                # [linux]

  - url: https://github.com/qupath/qupath/releases/download/v{{ github_version }}/QuPath-{{ github_version }}-Mac.dmg  # [osx]
    sha256: 34d8fb5e32c7ee627b2b06fe3c713f8474a5d72a68b290f17ba85c86aeda7b09                                           # [osx]

  - url: https://github.com/qupath/qupath/releases/download/v{{ github_version }}/QuPath-{{ github_version }}-Windows.zip  # [win]
    folder: qupath                                                                                                         # [win]
    sha256: 522f57211ec0e02c7a2d5e435950f2537be52e7bd1740e37c8a458657ec81817                                               # [win]

build:

  number: {{ build_number }}

  # See https://conda.io/projects/conda-build/en/latest/resources/define-metadata.html#binary-relocation
  # QuPath is working fine without relocation, but chokes if conda messes around these shared objects
  binary_relocation: False

  script:

    # --- linux
    - mkdir -p ${PREFIX}/opt/QuPath-{{ github_version }}            # [linux]
    - mv bin lib ${PREFIX}/opt/QuPath-{{ github_version }}          # [linux]
    - cd ${PREFIX}/opt                                              # [linux]
    - ln -s QuPath-{{ github_version }} QuPath                      # [linux]
    - mkdir -p ${PREFIX}/bin                                        # [linux]
    - cd ${PREFIX}/bin                                              # [linux]
    - ln -s ../opt/QuPath/bin/QuPath-{{ github_version }} ./qupath  # [linux]

    # --- macos
    - 7z x QuPath-{{ github_version }}-Mac.dmg                                      # [osx]
    - mv QuPath-{{ github_version }}/QuPath-{{ github_version }}.app ${PREFIX}/bin  # [osx]
    - cd ${PREFIX}/bin                                                              # [osx]
    - ln -s QuPath-{{ github_version }}.app QuPath.app                              # [osx]
    - chmod +x QuPath.app/Contents/MacOS/QuPath-{{ github_version }}                # [osx]
    - cp ${RECIPE_DIR}/qupath-macos ${PREFIX}/bin/qupath                            # [osx]

    # --- windows
    - mkdir %LIBRARY_PREFIX%\QuPath                                                                    # [win]
    - robocopy %SRC_DIR%\qupath\ %LIBRARY_PREFIX%\QuPath\ *.* /E /MOV                                  # [win]
    - copy %LIBRARY_PREFIX%\QuPath\QuPath-{{ github_version }}.exe %LIBRARY_PREFIX%\QuPath\QuPath.exe  # [win]

  # At the moment these are milestones and there are no API stability guarantees.
  # So let's not pin here yet
  # run_exports:
    # - {{ pin_subpackage('qupath', max_pin='x.x') }}

requirements:
  build:
    - p7zip  # [osx]

test:
  commands:
    # some smoke tests
    - qupath -script fake -image fake.ome.tiff  # [unix]

    # TODO: work some proper tests in windows (when we setup access to a VM or get a windows machine)
    # Notes: using this command here does not work (YAML cannot be parsed)
    #        using it in run_test.bat hangs the test
    # - %LIBRARY_PREFIX%\QuPath\QuPath.exe -script fake -image fake.ome.tiff # [win]
    # So we only check that the files exist in the package...
    - if exist %LIBRARY_PREFIX%\QuPath\QuPath.exe (exit 0) else (exit 1)  # [win]

    # maybe do run some script to exercise the library (e.g. make sure openslide is found and works correctly)
    # maybe install ququ and test some bindings

about:
  home: https://qupath.github.io/
  license: GPLv3
  # TODO probably we should specify license_file with all licenses from qupath deps... they are included anyway in package
  # Maybe copy them as part of the build process (see e.g. the ffmpeg windows recipe)
  summary: QuPath is an open, powerful, flexible, extensible software platform for whole slide image analysis.

extra:
  recipe-maintainers:
    - sdvillal
